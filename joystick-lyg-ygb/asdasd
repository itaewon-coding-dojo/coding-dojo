/*
아는것
name의 길이만큼 A로 채워야한다
조이스틱 위로 동작하면 다음알파벳 한칸
아래면 알바펫 거꾸로 한칸
왼쪽이면 커서 왼쪽이동 첫번째에서 이동하면 맨끝으로
오른쪽이면 커서 오른쪽으로 이동

계획
일단 입력값을 아스키코드로된 배열에 담는다
name값도 아스키코드로 된 배열에 담는다.
첫번째 값을 name[i]값과 똑같이 만들어준다.
일단 65-name[i]와 91-name[i] 최솟값을 리턴해서 더해준다
왼쪽으로 while돌려서 A갯수 구하고 오른쪽으로 A갯수 구하고
 A가 아니면 카운트 리턴 해주고 더 적은쪽으로 출발
*/
const joystick = (name) => {
    let count = 0;
    const arr = Array(name.length).fill(65); 
    const nameArr = name.split('').map(i=>i.charCodeAt());
    const originalName = nameArr.slice(0,nameArr.length)
    // console.log(originalName)
    if(nameArr.filter(x=> x !== 65).length ===0){
        return 0;
    }
    count += Math.min(nameArr[0]-65, 91-nameArr[0]);
    nameArr.shift();
    if(nameArr.filter(x=> x !== 65).length ===0){
        return count;
    }
    const getMinCountRight = getMinCount(nameArr)
    nameArr.reverse();
    const getMinCountLeft = getMinCount(nameArr)
    nameArr.reverse();
    console.log(count);
    if(getMinCountRight<= getMinCountLeft) {
        for(let i=0; i<nameArr.length-getMinCountLeft; i++){
            console.log(nameArr.length-getMinCountLeft);
            // console.log('max',Math.min(nameArr[i]-65, 91-nameArr[i]));
            count += Math.min(nameArr[i]-65, 91-nameArr[i])+1;
            console.log(count);
            console.log('m',getMinCountRight);
        }
        count+=getMinCountRight;
    }
    else{
        nameArr.reverse();
        for(let i=0; i<nameArr.length-getMinCountRight; i++){            
            count += Math.min(nameArr[i]-65, 91-nameArr[i])+1;
        }
    }
    return count;
}

const getMinCount = (nameArr) => {
    console.log(nameArr)
    let whileCount = 0;
    // if(nameArr[whileCount]==65){
    //     return 0;
    // }
    while(nameArr[whileCount] === 65)
    {
        whileCount+= 1
    }
    return whileCount;
}


test('joystick', ()=> {
    expect(joystick('AAABAAA')).toBe(4)
    // expect(joystick('JAAZABA')).toBe(56)
    
})